// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Change this from "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String       @id @default(cuid())
  name          String?
  password      String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  quizzes       Quiz[]
  answers       UserAnswer[] // This is now valid because of the change in UserAnswer
}

model Question {
  id           String         @id @default(cuid())
  text         String
  moduleId     String         // e.g., "PM5101-16", "PM5101-20"
  difficulty   Int            // e.g., 1 (easy) to 5 (hard)
  explanation  String?
  answerOptions AnswerOption[]
  userAnswers  UserAnswer[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        String   @id @default(cuid())
  userId    String
  // Add the @relation attribute here to complete the link
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String   @default("in-progress") // "in-progress", "completed"
  createdAt DateTime @default(now())
  // The relation field 'userAnswers' on Quiz is also missing a back-relation
  userAnswers UserAnswer[]
}

// Tracks each answer a user submits during a quiz
model UserAnswer {
  id               String   @id @default(cuid())
  quizId           String
  quiz             Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  isCorrect        Boolean
  createdAt        DateTime @default(now())

  // Add these two lines to complete the relation with User
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}