generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(cuid())
  name            String?
  password        String?
  email           String?            @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  quizzes         Quiz[]
  userAnswers     UserAnswer[]
  userCellMastery UserCellMastery[]
  engineLogs      EngineLog[]
  abilityHistory  AbilityHistory[]
}

model Cell {
  id             String          @id @default(cuid())
  name           String          
  difficulty_b   Float           @default(0)
  discrimination_a Float         @default(1)
  questions      Question[]
  userMastery    UserCellMastery[]
  abilityHistory  AbilityHistory[]
}

model Question {
  id               String         @id @default(cuid())
  text             String
  explanation      String?
  cellId           String
  cell             Cell           @relation(fields: [cellId], references: [id])
  difficulty_b     Float          @default(0)
  discrimination_a Float          @default(1)
  answerOptions    AnswerOption[]
  userAnswers      UserAnswer[]
}

model AnswerOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Quiz {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      String       @default("in-progress")
  createdAt   DateTime     @default(now())
  userAnswers UserAnswer[]
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  engineLogs      EngineLog[]
}

model UserCellMastery {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cellId         String
  cell           Cell     @relation(fields: [cellId], references: [id], onDelete: Cascade)
  ability_theta  Float    @default(0)
  selection_count Int      @default(0)
  mastery_status Int      @default(0)
  updatedAt      DateTime @updatedAt

  @@unique([userId, cellId]) // A user has only one mastery record per cell
}

model UserAnswer {
  id               String   @id @default(cuid())
  quizId           String
  quiz             Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String
  isCorrect        Boolean
  createdAt        DateTime @default(now())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EngineLog {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  eventType String   // 'question_selected', 'answer_processed', 'mastery_achieved', etc.
  data      String   // JSON string with event-specific data
  duration  Int?     // milliseconds (optional)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId, quizId])
  @@index([eventType])
  @@index([createdAt])
}

model IRTParameterHistory {
  id               String   @id @default(cuid())
  entityType       String   
  entityId         String   
  difficulty_b     Float
  discrimination_a Float
  reason           String?  
  updatedAt        DateTime @default(now())

  @@index([entityType, entityId])
  @@index([updatedAt])
}

model AbilityHistory {
  id            String   @id @default(cuid())
  userId        String
  cellId        String
  ability_theta Float
  confidence    Float?   
  quizId        String?
  updatedAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cell Cell @relation(fields: [cellId], references: [id], onDelete: Cascade)

  @@index([userId, cellId])
  @@index([updatedAt])
}